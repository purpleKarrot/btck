// Copyright (c) 2025-present The Bitcoin Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

package main

import (
	"btck"
	"testing"
)

func TestTransaction(t *testing.T) {
	data := []byte{
		0x02, 0x00, 0x00, 0x00, 0x01, 0x3f, 0x7c, 0xeb, 0xd6, 0x5c, 0x27, 0x43, 0x1a, 0x90, 0xbb, 0xa7,
		0xf7, 0x96, 0x91, 0x4f, 0xe8, 0xcc, 0x2d, 0xdf, 0xc3, 0xf2, 0xcb, 0xd6, 0xf7, 0xe5, 0xf2, 0xfc,
		0x85, 0x45, 0x34, 0xda, 0x95, 0x00, 0x00, 0x00, 0x00, 0x6b, 0x48, 0x30, 0x45, 0x02, 0x21, 0x00,
		0xde, 0x1a, 0xc3, 0xbc, 0xdf, 0xb0, 0x33, 0x22, 0x07, 0xc4, 0xa9, 0x1f, 0x38, 0x32, 0xbd, 0x2c,
		0x29, 0x15, 0x84, 0x01, 0x65, 0xf8, 0x76, 0xab, 0x47, 0xc5, 0xf8, 0x99, 0x6b, 0x97, 0x1c, 0x36,
		0x02, 0x20, 0x1c, 0x6c, 0x05, 0x3d, 0x75, 0x0f, 0xad, 0xde, 0x59, 0x9e, 0x6f, 0x5c, 0x4e, 0x19,
		0x63, 0xdf, 0x0f, 0x01, 0xfc, 0x0d, 0x97, 0x81, 0x5e, 0x81, 0x57, 0xe3, 0xd5, 0x9f, 0xe0, 0x9c,
		0xa3, 0x0d, 0x01, 0x21, 0x03, 0x69, 0x9b, 0x46, 0x4d, 0x1d, 0x8b, 0xc9, 0xe4, 0x7d, 0x4f, 0xb1,
		0xcd, 0xaa, 0x89, 0xa1, 0xc5, 0x78, 0x3d, 0x68, 0x36, 0x3c, 0x4d, 0xbc, 0x4b, 0x52, 0x4e, 0xd3,
		0xd8, 0x57, 0x14, 0x86, 0x17, 0xfe, 0xff, 0xff, 0xff, 0x02, 0x83, 0x6d, 0x3c, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xfc, 0x25, 0xd6, 0xd5, 0xc9, 0x40, 0x03, 0xbf, 0x5b, 0x0c,
		0x7b, 0x64, 0x0a, 0x24, 0x8e, 0x2c, 0x63, 0x7f, 0xcf, 0xb0, 0x88, 0xac, 0x7a, 0xda, 0x82, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xfb, 0xed, 0x3d, 0x9b, 0x11, 0x18, 0x32, 0x09,
		0xa5, 0x79, 0x99, 0xd5, 0x4d, 0x59, 0xf6, 0x7c, 0x01, 0x9e, 0x75, 0x6c, 0x88, 0xac, 0x6a, 0xcb,
		0x07, 0x00,
	}

	tx := btck.NewTransaction(data)

	if tx.Len() != 2 {
		t.Fatalf("expected 2 outputs, got %d", tx.Len())
	}

	if tx.At(0).Amount() != 20737411 {
		t.Errorf("expected first output amount 20737411, got %d", tx.At(0).Amount())
	}

	if tx.At(1).Amount() != 42130042 {
		t.Errorf("expected second output amount 42130042, got %d", tx.At(1).Amount())
	}

	for i := 0; i < tx.Len(); i++ {
		t.Logf("output %d amount: %d", i, tx.At(i).Amount())
	}
}
